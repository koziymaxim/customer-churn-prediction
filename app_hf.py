import streamlit as st
import pandas as pd
import pickle
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤",
    page_icon="üëã",
    layout="wide"
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
try:
    with open('models/churn_pipeline.pkl', 'rb') as f:
        pipeline = pickle.load(f)
except FileNotFoundError:
    st.error("–§–∞–π–ª —Å –º–æ–¥–µ–ª—å—é 'models/churn_pipeline.pkl' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ Hugging Face Spaces.")
    st.stop()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞, –µ—Å–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ—Ç

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
type_options = {
    '–ï–∂–µ–º–µ—Å—è—á–Ω–æ': 'Month-to-month',
    '–ù–∞ 1 –≥–æ–¥': 'One year',
    '–ù–∞ 2 –≥–æ–¥–∞': 'Two year'
}
payment_options = {
    '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —á–µ–∫': 'Electronic check',
    '–ß–µ–∫ –ø–æ –ø–æ—á—Ç–µ': 'Mailed check',
    '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ (–∞–≤—Ç–æ)': 'Bank transfer (automatic)',
    '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ (–∞–≤—Ç–æ)': 'Credit card (automatic)'
}
yes_no_options = { '–î–∞': 'Yes', '–ù–µ—Ç': 'No' }
not_connected_options = {
    '–î–∞': 'Yes',
    '–ù–µ—Ç': 'No',
    '–£—Å–ª—É–≥–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞': 'Not connected'
}

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
st.title('–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤')
st.write("–≠—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å CatBoost –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —É—Ö–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å'.")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
st.sidebar.header('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª–∏–µ–Ω—Ç–∞')
inputs = {}

type_choice = st.sidebar.selectbox('–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', list(type_options.keys()))
inputs['type'] = type_options[type_choice]

payment_choice = st.sidebar.selectbox('–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:', list(payment_options.keys()))
inputs['payment_method'] = payment_options[payment_choice]

inputs['monthly_charges'] = st.sidebar.slider('–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂:', min_value=18.0, max_value=120.0, value=70.0, step=0.1)
inputs['begin_date'] = st.sidebar.text_input('–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):', value="2020-01-01")

col1, col2 = st.sidebar.columns(2)
with col1:
    billing_choice = st.sidebar.radio('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å—á–µ—Ç:', list(yes_no_options.keys()))
    inputs['paperless_billing'] = yes_no_options[billing_choice]

    partner_choice = st.sidebar.radio('–ù–∞–ª–∏—á–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:', list(yes_no_options.keys()))
    inputs['partner'] = yes_no_options[partner_choice]

    dependents_choice = st.sidebar.radio('–ù–∞–ª–∏—á–∏–µ –∏–∂–¥–∏–≤–µ–Ω—Ü–µ–≤:', list(yes_no_options.keys()))
    inputs['dependents'] = yes_no_options[dependents_choice]

    inputs['senior_citizen'] = st.sidebar.radio('–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä:', [0, 1], format_func=lambda x: '–î–∞' if x == 1 else '–ù–µ—Ç')

with col2:
    lines_choice = st.sidebar.selectbox('–ù–µ—Å–∫. —Ç–µ–ª. –ª–∏–Ω–∏–π:', list(not_connected_options.keys()))
    inputs['multiple_lines'] = not_connected_options[lines_choice]

    security_choice = st.sidebar.selectbox('–û–Ω–ª–∞–π–Ω-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:', list(not_connected_options.keys()))
    inputs['online_security'] = not_connected_options[security_choice]

    backup_choice = st.sidebar.selectbox('–û–Ω–ª–∞–π–Ω-—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ:', list(not_connected_options.keys()))
    inputs['online_backup'] = not_connected_options[backup_choice]

    protection_choice = st.sidebar.selectbox('–ó–∞—â–∏—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', list(not_connected_options.keys()))
    inputs['device_protection'] = not_connected_options[protection_choice]

    support_choice = st.sidebar.selectbox('–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞:', list(not_connected_options.keys()))
    inputs['tech_support'] = not_connected_options[support_choice]

    tv_choice = st.sidebar.selectbox('–°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–µ –¢–í:', list(not_connected_options.keys()))
    inputs['streaming_tv'] = not_connected_options[tv_choice]

    movies_choice = st.sidebar.selectbox('–°—Ç—Ä–∏–º–∏–Ω–≥ —Ñ–∏–ª—å–º–æ–≤:', list(not_connected_options.keys()))
    inputs['streaming_movies'] = not_connected_options[movies_choice]

# –ö–Ω–æ–ø–∫–∞ –∏ –ª–æ–≥–∏–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è 
if st.sidebar.button('üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –æ—Ç—Ç–æ–∫'):
    input_data = inputs.copy()

    try:
        snapshot_date = datetime.strptime('2020-02-01', '%Y-%m-%d')
        begin_date = datetime.strptime(input_data['begin_date'], '%Y-%m-%d')
        input_data['days_use'] = (snapshot_date - begin_date).days

        service_cols = ['tech_support', 'device_protection', 'online_backup', 'online_security']
        input_data['count_services'] = sum(1 for col in service_cols if input_data[col] == 'Yes')

        streaming_cols = ['streaming_movies', 'streaming_tv']
        input_data['count_streaming'] = sum(1 for col in streaming_cols if input_data[col] == 'Yes')

        features_df = pd.DataFrame([input_data])

        prediction = pipeline.predict(features_df)[0]
        probability = pipeline.predict_proba(features_df)[0][1]

        st.subheader('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞:')
        if prediction == 1:
            st.error(f'–ö–ª–∏–µ–Ω—Ç —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —É–π–¥–µ—Ç. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞: **{probability:.2%}**')
        else:
            st.success(f'–ö–ª–∏–µ–Ω—Ç —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞: **{probability:.2%}**')

    except ValueError as e:
        st.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î. –î–µ—Ç–∞–ª–∏: {e}")

st.sidebar.info("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.")